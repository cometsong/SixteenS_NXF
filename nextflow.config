#!/usr/bin/env nextflow

manifest {
    name = "SixteenS"
    description = 'Assembling, cleaning analyses, classification and QC of 16S sample fastq files.'
    author = 'Benjamin Leopold'
    mainScript = "main.nf"
    nextflowVersion = '!>=20.04.0'
    version = "0.99.44"
    //TODO: homePage = https://mbiomecore/pipelines/SixteenS
}

// On JAXGM cluster server:
params.teamPath = "/projects/mbiomecore"
params.teamDbs  = "/projects/mbiomecore/dbs"
params.nextPath = params.teamPath + "/local/pipelines/nextflows"

// Include JAX Universal Config Settings
univcfg = new File(params.nextPath + "/universal-nextflow-config/universal.config")
if (univcfg.canRead()) { includeConfig univcfg }
else {
    profiles {
        standard { process.executor = "local" }
        sumner {
            process.executor = "slurm"
            process.module = "slurm"
            process.clusterOptions = "-q batch"
        }
    }
}

// Included Config Settings
//use: nextflow -c params.config run thisWorkflow ..options..
//params.email = params.email ?: null
params.email = params.email ?: "$USER@jax.org"
//params.email = params.email ?: "benjamin.leopold@jax.org"

params.outdir = params.outdir ?: "${manifest.name}_nxf_results" // if not specified, relative to launchDir
params.logdir = null      // if set in params.config or in cli, it will override this!
logDir = params.logdir ?: params.outdir + "/logs"

process {
    echo = true
    //errorStrategy options: 'ignore' 'retry' 'finish' 'terminate'
    errorStrategy = { task.attempt <= 2 ? "retry" : "finish" }
    errorStrategy = "terminate" //FIXME: for DEBUG only!!

    simgPath = params.teamPath + "/local/containers/singular"
    withlabel: trimms   { container = "file://${simgPath}/trimmomatic__0.39__cometsong.sif"
                          time = 10.hour;
                          memory = 10.GB;
                          }
    withLabel: flash    { container = "file://${simgPath}/flash_assembler__1.2.11__cometsong.sif"
                          time = 10.hour;
                          memory = 4.GB;
                          }
    withLabel: uchime   { container = "file://${simgPath}/uchime4__v4.2.40__cometsong.sif"
                          time = 36.hour;
                          memory = 15.GB;
                          cpus = 4;
                          }
    withLabel: bmtagger { container = "file://${simgPath}/bmtagger_se__3.101__cometsong.sif"
                          time = 36.hour;
                          memory = 36.GB;
                          cpus = 4;
                          }
    withLabel: rdpclass { container = "file://${simgPath}/rdpclassifier__2.12__cometsong.sif"
                          time =  8.hour;
                          memory =  4.GB;
                          }
    withLabel: spikes   { container = "file://${simgPath}/mmseqs__latest-20200207__cometsong.sif"
                          time = 8.hour;
                          memory = 8.GB;
                          cpus = 4;
                          }
    withLabel: fq2fa    { container = "file://${simgPath}/fastx_extract__v0.0.14ex__cometsong.sif" }
    withLabel: perl5    { container = "file://${simgPath}/perl__5.32.0.sif" }
    withLabel: python3  { container = "file://${simgPath}/python__3.8.5-alpine-utils.sif" }
    withLabel: utils    { container = "file://${simgPath}/alpine-bash-utils__v3.11__cometsong.sif" }
}

process.afterScript = { // Copy all workDir/.command.* files to pipeline 'log' directory.
    // Modified from 'zichner's orig at: https://github.com/nextflow-io/nextflow/issues/1166#issuecomment-502467562
    logMainDir = workflow.launchDir.resolve(logDir).toString()
    if (!logMainDir.matches("^/.*")) logMainDir = workflow.launchDir.toString() + "/nxf_process_logs/" 

    // Build log subdirectory paths based on task name
    logSubDir = task.name
                .replace(" (null)", "")
                .replace(" ", "/")
                .replaceAll(" ", "_")
                .replaceAll("[()]", "")
    logDir = logMainDir + logSubDir

    // Assemble final command
    cmd = '''\
    ls -AlR --full-time > .command.ls; \
    mkdir log; \
    for file in .command.*; do
         cp -a ${file} log/nxf${file};
    done; \
    '''
    cmd += "mkdir -p ${logDir}/; cp -a log/* ${logDir}/;"
    // Run it
    cmd
}

notification {
    enabled = true
    to = params.email
    from = "nextflow-${manifest.name}"
}

singularity {
    enabled = true
    process.module = "singularity"
    cacheDir = "${process.simgPath}/cache"
    autoMounts = true
    runOptions = ''
    engineOptions = ''
}

env {
    NXF_ANSI_SUMMARY = true
    NXF_ANSI_LOG = true
    NXF_DEBUG = 2
}

timeline {
    enabled = true
    file = "${logDir}/${manifest.name}_nxf_status/timeline.html"
}

report {
    enabled = true
    file = "${logDir}/${manifest.name}_nxf_status/report.html"
}

trace {
    enabled = true
    file = "${logDir}/${manifest.name}_nxf_status/trace.txt"
    fields = ""\
       + "task_id,"   \
       + "hash,"      \
       + "process,"   \
       + "tag,"       \
       + "status,"    \
       + "exit,"      \
       + "start,"     \
       + "container," \
       + "cpus,"      \
       + "time,"      \
       + "disk,"      \
       + "memory,"    \
       + "duration,"  \
       + "realtime,"  \
       + "queue,"     \
       + "%cpu,"      \
       + "%mem,"      \
       + "rss,"       \
       + "vmem,"      \
       + "rchar,"     \
       + "wchar"
    }

// vim: set ft=groovy.nextflow ts=4 sw=0 tw=100 et fdm=syntax:
